{"version":3,"file":"aiInsightsService-c5fbee27.js","sources":["../../src/services/aiInsightsService.ts"],"sourcesContent":["import { JiraIssue, SprintData } from '../types/jira.types';\n\nexport interface AIInsight {\n  id: string;\n  type: 'performance' | 'trend' | 'anomaly' | 'recommendation' | 'risk';\n  title: string;\n  description: string;\n  confidence: number; // 0-100\n  impact: 'low' | 'medium' | 'high' | 'critical';\n  category: string;\n  metrics: Record<string, any>;\n  recommendations: string[];\n  timestamp: Date;\n  priority: number; // 1-10\n}\n\nexport interface TrendAnalysis {\n  metric: string;\n  period: 'week' | 'month' | 'quarter';\n  trend: 'increasing' | 'decreasing' | 'stable' | 'volatile';\n  changeRate: number; // percentage\n  significance: number; // 0-100\n  dataPoints: Array<{\n    date: string;\n    value: number;\n    predicted?: number;\n  }>;\n}\n\nexport interface AnomalyDetection {\n  type: 'spike' | 'drop' | 'pattern_break' | 'outlier';\n  metric: string;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  detectedAt: Date;\n  value: number;\n  expectedValue: number;\n  deviation: number; // percentage\n  description: string;\n  context: Record<string, any>;\n}\n\nexport class AIInsightsService {\n  private static instance: AIInsightsService;\n\n  public static getInstance(): AIInsightsService {\n    if (!AIInsightsService.instance) {\n      AIInsightsService.instance = new AIInsightsService();\n    }\n    return AIInsightsService.instance;\n  }\n\n  // Generate comprehensive AI insights\n  async generateInsights(\n    issues: JiraIssue[],\n    sprints: SprintData[],\n    timeRange: 'week' | 'month' | 'quarter' = 'month'\n  ): Promise<AIInsight[]> {\n    console.log('ü§ñ AI Insights: Gerando an√°lises autom√°ticas...');\n\n    const insights: AIInsight[] = [];\n\n    try {\n      // 1. Performance Analysis\n      const performanceInsights = await this.analyzePerformance(\n        issues,\n        sprints,\n        timeRange\n      );\n      insights.push(...performanceInsights);\n\n      // 2. Trend Analysis\n      const trendInsights = await this.analyzeTrends(issues, timeRange);\n      insights.push(...trendInsights);\n\n      // 3. Anomaly Detection\n      const anomalyInsights = await this.detectAnomalies(issues, timeRange);\n      insights.push(...anomalyInsights);\n\n      // 4. Risk Assessment\n      const riskInsights = await this.assessRisks(issues, sprints);\n      insights.push(...riskInsights);\n\n      // 5. Recommendations\n      const recommendationInsights = await this.generateRecommendations(\n        issues,\n        sprints\n      );\n      insights.push(...recommendationInsights);\n\n      // Sort by priority and confidence\n      insights.sort((a, b) => {\n        if (a.priority !== b.priority) return b.priority - a.priority;\n        return b.confidence - a.confidence;\n      });\n\n      console.log(`‚úÖ AI Insights: ${insights.length} insights gerados`);\n      return insights;\n    } catch (error) {\n      console.error('‚ùå AI Insights Error:', error);\n      return [];\n    }\n  }\n\n  // Performance Analysis\n  private async analyzePerformance(\n    issues: JiraIssue[],\n    sprints: SprintData[],\n    timeRange: string\n  ): Promise<AIInsight[]> {\n    const insights: AIInsight[] = [];\n\n    // Calculate key metrics\n    const completedIssues = issues.filter(\n      issue => issue.fields.status.statusCategory.name === 'Done'\n    );\n\n    const velocity = this.calculateVelocity(issues, sprints);\n    const cycleTime = this.calculateCycleTime(issues);\n    const bugRate = this.calculateBugRate(issues);\n    const reworkRate = this.calculateReworkRate(issues);\n\n    // Velocity Analysis\n    if (velocity < 10) {\n      insights.push({\n        id: 'low-velocity',\n        type: 'performance',\n        title: 'Velocidade Baixa Detectada',\n        description: `A velocidade da equipe est√° em ${velocity.toFixed(\n          1\n        )} pontos/sprint, considerada baixa para o tamanho da equipe.`,\n        confidence: 85,\n        impact: 'high',\n        category: 'Performance',\n        metrics: { velocity, threshold: 15 },\n        recommendations: [\n          'Revisar estimativas de story points',\n          'Identificar gargalos no processo',\n          'Considerar pair programming',\n          'Avaliar complexidade das tarefas',\n        ],\n        timestamp: new Date(),\n        priority: 8,\n      });\n    }\n\n    // Cycle Time Analysis\n    if (cycleTime > 14) {\n      insights.push({\n        id: 'high-cycle-time',\n        type: 'performance',\n        title: 'Tempo de Ciclo Elevado',\n        description: `O tempo m√©dio de ciclo est√° em ${cycleTime.toFixed(\n          1\n        )} dias, acima do ideal de 7-10 dias.`,\n        confidence: 90,\n        impact: 'high',\n        category: 'Performance',\n        metrics: { cycleTime, ideal: 10 },\n        recommendations: [\n          'Implementar WIP limits',\n          'Revisar processo de review',\n          'Automatizar testes',\n          'Melhorar comunica√ß√£o entre equipes',\n        ],\n        timestamp: new Date(),\n        priority: 9,\n      });\n    }\n\n    // Bug Rate Analysis\n    if (bugRate > 0.3) {\n      insights.push({\n        id: 'high-bug-rate',\n        type: 'performance',\n        title: 'Taxa de Bugs Elevada',\n        description: `A taxa de bugs est√° em ${(bugRate * 100).toFixed(\n          1\n        )}%, considerada alta.`,\n        confidence: 80,\n        impact: 'medium',\n        category: 'Quality',\n        metrics: { bugRate, threshold: 0.2 },\n        recommendations: [\n          'Implementar testes automatizados',\n          'Revisar processo de QA',\n          'Melhorar defini√ß√£o de crit√©rios de aceite',\n          'Investigar causas raiz dos bugs',\n        ],\n        timestamp: new Date(),\n        priority: 7,\n      });\n    }\n\n    return insights;\n  }\n\n  // Trend Analysis\n  private async analyzeTrends(\n    issues: JiraIssue[],\n    timeRange: string\n  ): Promise<AIInsight[]> {\n    const insights: AIInsight[] = [];\n\n    // Analyze velocity trends\n    const velocityTrend = this.analyzeVelocityTrend(issues, timeRange);\n    if (\n      velocityTrend.trend === 'decreasing' &&\n      velocityTrend.significance > 70\n    ) {\n      insights.push({\n        id: 'velocity-decline',\n        type: 'trend',\n        title: 'Decl√≠nio na Velocidade',\n        description: `A velocidade da equipe est√° diminuindo consistentemente (${velocityTrend.changeRate.toFixed(\n          1\n        )}% por ${timeRange}).`,\n        confidence: velocityTrend.significance,\n        impact: 'high',\n        category: 'Trends',\n        metrics: velocityTrend,\n        recommendations: [\n          'Investigar causas do decl√≠nio',\n          'Revisar carga de trabalho',\n          'Avaliar burnout da equipe',\n          'Implementar retrospectivas mais frequentes',\n        ],\n        timestamp: new Date(),\n        priority: 9,\n      });\n    }\n\n    // Analyze completion rate trends\n    const completionTrend = this.analyzeCompletionTrend(issues, timeRange);\n    if (\n      completionTrend.trend === 'decreasing' &&\n      completionTrend.significance > 60\n    ) {\n      insights.push({\n        id: 'completion-decline',\n        type: 'trend',\n        title: 'Redu√ß√£o na Taxa de Conclus√£o',\n        description: `A taxa de conclus√£o de issues est√° diminuindo (${completionTrend.changeRate.toFixed(\n          1\n        )}% por ${timeRange}).`,\n        confidence: completionTrend.significance,\n        impact: 'medium',\n        category: 'Trends',\n        metrics: completionTrend,\n        recommendations: [\n          'Revisar defini√ß√£o de \"Done\"',\n          'Avaliar complexidade das tarefas',\n          'Melhorar planejamento de sprint',\n          'Identificar depend√™ncias externas',\n        ],\n        timestamp: new Date(),\n        priority: 6,\n      });\n    }\n\n    return insights;\n  }\n\n  // Anomaly Detection\n  private async detectAnomalies(\n    issues: JiraIssue[],\n    timeRange: string\n  ): Promise<AIInsight[]> {\n    const insights: AIInsight[] = [];\n\n    // Detect velocity spikes/drops\n    const velocityAnomalies = this.detectVelocityAnomalies(issues, timeRange);\n    insights.push(...velocityAnomalies);\n\n    // Detect bug spikes\n    const bugAnomalies = this.detectBugAnomalies(issues, timeRange);\n    insights.push(...bugAnomalies);\n\n    // Detect completion anomalies\n    const completionAnomalies = this.detectCompletionAnomalies(\n      issues,\n      timeRange\n    );\n    insights.push(...completionAnomalies);\n\n    return insights;\n  }\n\n  // Risk Assessment\n  private async assessRisks(\n    issues: JiraIssue[],\n    sprints: SprintData[]\n  ): Promise<AIInsight[]> {\n    const insights: AIInsight[] = [];\n\n    // Overdue issues risk\n    const overdueIssues = issues.filter(issue => {\n      if (!issue.fields.duedate) return false;\n      return new Date(issue.fields.duedate) < new Date();\n    });\n\n    if (overdueIssues.length > 0) {\n      insights.push({\n        id: 'overdue-issues',\n        type: 'risk',\n        title: 'Issues Atrasadas',\n        description: `${overdueIssues.length} issues est√£o atrasadas, representando risco para o cronograma.`,\n        confidence: 95,\n        impact: 'high',\n        category: 'Risks',\n        metrics: {\n          overdueCount: overdueIssues.length,\n          totalIssues: issues.length,\n        },\n        recommendations: [\n          'Priorizar issues atrasadas',\n          'Revisar estimativas de prazo',\n          'Comunicar impactos aos stakeholders',\n          'Implementar buffer de tempo',\n        ],\n        timestamp: new Date(),\n        priority: 10,\n      });\n    }\n\n    // High priority issues without assignee\n    const unassignedHighPriority = issues.filter(\n      issue => issue.fields.priority.name === 'High' && !issue.fields.assignee\n    );\n\n    if (unassignedHighPriority.length > 0) {\n      insights.push({\n        id: 'unassigned-high-priority',\n        type: 'risk',\n        title: 'Issues de Alta Prioridade Sem Assignee',\n        description: `${unassignedHighPriority.length} issues de alta prioridade n√£o possuem respons√°vel atribu√≠do.`,\n        confidence: 90,\n        impact: 'medium',\n        category: 'Risks',\n        metrics: { unassignedCount: unassignedHighPriority.length },\n        recommendations: [\n          'Atribuir respons√°veis imediatamente',\n          'Revisar processo de atribui√ß√£o',\n          'Implementar alertas autom√°ticos',\n          'Criar SLA para atribui√ß√£o',\n        ],\n        timestamp: new Date(),\n        priority: 8,\n      });\n    }\n\n    return insights;\n  }\n\n  // Generate Recommendations\n  private async generateRecommendations(\n    issues: JiraIssue[],\n    sprints: SprintData[]\n  ): Promise<AIInsight[]> {\n    const insights: AIInsight[] = [];\n\n    // Process improvement recommendations\n    const processInsights = this.analyzeProcess(issues, sprints);\n    insights.push(...processInsights);\n\n    // Team efficiency recommendations\n    const efficiencyInsights = this.analyzeEfficiency(issues, sprints);\n    insights.push(...efficiencyInsights);\n\n    return insights;\n  }\n\n  // Helper methods for calculations\n  private calculateVelocity(\n    issues: JiraIssue[],\n    sprints: SprintData[]\n  ): number {\n    console.log('üîç AI Insights - calculateVelocity Debug:', {\n      totalIssues: issues.length,\n      totalSprints: sprints.length,\n      issuesSample: issues.slice(0, 3).map(issue => ({\n        key: issue.key,\n        status: issue.fields.status.name,\n        statusCategory: issue.fields.status.statusCategory.name,\n        type: issue.fields.issuetype.name,\n      })),\n    });\n\n    const completedIssues = issues.filter(\n      issue => issue.fields.status.statusCategory.name === 'Done'\n    );\n\n    console.log('üîç AI Insights - completedIssues:', {\n      completedCount: completedIssues.length,\n      completedSample: completedIssues.slice(0, 3).map(issue => ({\n        key: issue.key,\n        status: issue.fields.status.name,\n        type: issue.fields.issuetype.name,\n      })),\n    });\n\n    // Estimate story points based on issue type\n    const totalPoints = completedIssues.reduce((sum, issue) => {\n      const type = issue.fields.issuetype.name;\n      const points =\n        type === 'Story' ? 3 : type === 'Task' ? 2 : type === 'Bug' ? 1 : 5;\n      return sum + points;\n    }, 0);\n\n    const velocity = sprints.length > 0 ? totalPoints / sprints.length : 0;\n\n    console.log('üîç AI Insights - velocity calculation:', {\n      totalPoints,\n      sprintsLength: sprints.length,\n      velocity,\n    });\n\n    return velocity;\n  }\n\n  private calculateCycleTime(issues: JiraIssue[]): number {\n    const completedIssues = issues.filter(\n      issue => issue.fields.status.statusCategory.name === 'Done'\n    );\n\n    if (completedIssues.length === 0) return 0;\n\n    const totalCycleTime = completedIssues.reduce((sum, issue) => {\n      const created = new Date(issue.fields.created);\n      const updated = new Date(issue.fields.updated);\n      return sum + (updated.getTime() - created.getTime());\n    }, 0);\n\n    return totalCycleTime / completedIssues.length / (1000 * 60 * 60 * 24);\n  }\n\n  private calculateBugRate(issues: JiraIssue[]): number {\n    const totalIssues = issues.length;\n    const bugIssues = issues.filter(\n      issue => issue.fields.issuetype.name === 'Bug'\n    );\n\n    return totalIssues > 0 ? bugIssues.length / totalIssues : 0;\n  }\n\n  private calculateReworkRate(issues: JiraIssue[]): number {\n    // Simplified rework calculation based on status changes\n    const reworkIssues = issues.filter(issue => {\n      // If an issue has been updated multiple times after being \"Done\"\n      // it might indicate rework\n      return issue.fields.updated !== issue.fields.created;\n    });\n\n    return issues.length > 0 ? reworkIssues.length / issues.length : 0;\n  }\n\n  // Trend analysis methods\n  private analyzeVelocityTrend(issues: JiraIssue[], timeRange: string) {\n    // Simplified trend analysis\n    const recentIssues = this.getRecentIssues(issues, timeRange);\n    const olderIssues = this.getOlderIssues(issues, timeRange);\n\n    const recentVelocity = this.calculateVelocity(recentIssues, []);\n    const olderVelocity = this.calculateVelocity(olderIssues, []);\n\n    const changeRate =\n      olderVelocity > 0\n        ? ((recentVelocity - olderVelocity) / olderVelocity) * 100\n        : 0;\n\n    return {\n      metric: 'velocity',\n      period: timeRange as any,\n      trend:\n        changeRate > 10\n          ? 'increasing'\n          : changeRate < -10\n          ? 'decreasing'\n          : 'stable',\n      changeRate,\n      significance: Math.abs(changeRate),\n      dataPoints: [],\n    };\n  }\n\n  private analyzeCompletionTrend(issues: JiraIssue[], timeRange: string) {\n    const recentIssues = this.getRecentIssues(issues, timeRange);\n    const olderIssues = this.getOlderIssues(issues, timeRange);\n\n    const recentCompletion =\n      recentIssues.filter(\n        issue => issue.fields.status.statusCategory.name === 'Done'\n      ).length / recentIssues.length;\n\n    const olderCompletion =\n      olderIssues.filter(\n        issue => issue.fields.status.statusCategory.name === 'Done'\n      ).length / olderIssues.length;\n\n    const changeRate =\n      olderCompletion > 0\n        ? ((recentCompletion - olderCompletion) / olderCompletion) * 100\n        : 0;\n\n    return {\n      metric: 'completion',\n      period: timeRange as any,\n      trend:\n        changeRate > 10\n          ? 'increasing'\n          : changeRate < -10\n          ? 'decreasing'\n          : 'stable',\n      changeRate,\n      significance: Math.abs(changeRate),\n      dataPoints: [],\n    };\n  }\n\n  // Anomaly detection methods\n  private detectVelocityAnomalies(\n    issues: JiraIssue[],\n    timeRange: string\n  ): AIInsight[] {\n    const insights: AIInsight[] = [];\n\n    // Simplified anomaly detection\n    const velocity = this.calculateVelocity(issues, []);\n    const expectedVelocity = 15; // Expected baseline\n\n    if (velocity > expectedVelocity * 1.5) {\n      insights.push({\n        id: 'velocity-spike',\n        type: 'anomaly',\n        title: 'Pico de Velocidade Detectado',\n        description: `A velocidade atual (${velocity.toFixed(1)}) est√° ${(\n          ((velocity - expectedVelocity) / expectedVelocity) *\n          100\n        ).toFixed(1)}% acima do esperado.`,\n        confidence: 75,\n        impact: 'low',\n        category: 'Anomaly',\n        metrics: { velocity, expected: expectedVelocity },\n        recommendations: [\n          'Verificar se as estimativas est√£o corretas',\n          'Avaliar se h√° trabalho extra n√£o contabilizado',\n          'Documentar pr√°ticas que levaram ao aumento',\n        ],\n        timestamp: new Date(),\n        priority: 3,\n      });\n    }\n\n    return insights;\n  }\n\n  private detectBugAnomalies(\n    issues: JiraIssue[],\n    timeRange: string\n  ): AIInsight[] {\n    const insights: AIInsight[] = [];\n\n    const recentIssues = this.getRecentIssues(issues, timeRange);\n    const bugRate = this.calculateBugRate(recentIssues);\n\n    if (bugRate > 0.4) {\n      insights.push({\n        id: 'bug-spike',\n        type: 'anomaly',\n        title: 'Pico de Bugs Detectado',\n        description: `A taxa de bugs est√° em ${(bugRate * 100).toFixed(\n          1\n        )}%, significativamente acima do normal.`,\n        confidence: 85,\n        impact: 'high',\n        category: 'Anomaly',\n        metrics: { bugRate, threshold: 0.2 },\n        recommendations: [\n          'Investigar causa raiz do aumento',\n          'Revisar processo de QA',\n          'Implementar testes adicionais',\n          'Comunicar com a equipe de desenvolvimento',\n        ],\n        timestamp: new Date(),\n        priority: 8,\n      });\n    }\n\n    return insights;\n  }\n\n  private detectCompletionAnomalies(\n    issues: JiraIssue[],\n    timeRange: string\n  ): AIInsight[] {\n    const insights: AIInsight[] = [];\n\n    const recentIssues = this.getRecentIssues(issues, timeRange);\n    const completionRate =\n      recentIssues.filter(\n        issue => issue.fields.status.statusCategory.name === 'Done'\n      ).length / recentIssues.length;\n\n    if (completionRate < 0.3) {\n      insights.push({\n        id: 'completion-drop',\n        type: 'anomaly',\n        title: 'Queda na Taxa de Conclus√£o',\n        description: `A taxa de conclus√£o est√° em ${(\n          completionRate * 100\n        ).toFixed(1)}%, abaixo do esperado.`,\n        confidence: 80,\n        impact: 'medium',\n        category: 'Anomaly',\n        metrics: { completionRate, threshold: 0.5 },\n        recommendations: [\n          'Identificar bloqueios nas tarefas',\n          'Revisar defini√ß√£o de \"Done\"',\n          'Avaliar carga de trabalho da equipe',\n          'Implementar daily standups mais eficazes',\n        ],\n        timestamp: new Date(),\n        priority: 6,\n      });\n    }\n\n    return insights;\n  }\n\n  // Process and efficiency analysis\n  private analyzeProcess(\n    issues: JiraIssue[],\n    sprints: SprintData[]\n  ): AIInsight[] {\n    const insights: AIInsight[] = [];\n\n    // Analyze process efficiency\n    const cycleTime = this.calculateCycleTime(issues);\n    const reworkRate = this.calculateReworkRate(issues);\n\n    if (cycleTime > 21) {\n      insights.push({\n        id: 'process-inefficiency',\n        type: 'recommendation',\n        title: 'Processo Ineficiente Detectado',\n        description: `O tempo de ciclo m√©dio est√° em ${cycleTime.toFixed(\n          1\n        )} dias, indicando inefici√™ncia no processo.`,\n        confidence: 90,\n        impact: 'high',\n        category: 'Process',\n        metrics: { cycleTime, ideal: 14 },\n        recommendations: [\n          'Implementar Kanban com WIP limits',\n          'Revisar processo de aprova√ß√£o',\n          'Automatizar testes e deploy',\n          'Melhorar comunica√ß√£o entre equipes',\n        ],\n        timestamp: new Date(),\n        priority: 9,\n      });\n    }\n\n    return insights;\n  }\n\n  private analyzeEfficiency(\n    issues: JiraIssue[],\n    sprints: SprintData[]\n  ): AIInsight[] {\n    const insights: AIInsight[] = [];\n\n    // Analyze team efficiency\n    const velocity = this.calculateVelocity(issues, sprints);\n    const bugRate = this.calculateBugRate(issues);\n\n    if (velocity > 0 && bugRate < 0.1) {\n      insights.push({\n        id: 'high-efficiency',\n        type: 'recommendation',\n        title: 'Equipe de Alta Efici√™ncia',\n        description: `A equipe est√° demonstrando alta efici√™ncia com boa velocidade e baixa taxa de bugs.`,\n        confidence: 85,\n        impact: 'low',\n        category: 'Efficiency',\n        metrics: { velocity, bugRate },\n        recommendations: [\n          'Documentar pr√°ticas de sucesso',\n          'Compartilhar conhecimento com outras equipes',\n          'Considerar aumentar a complexidade dos projetos',\n          'Manter o ritmo atual',\n        ],\n        timestamp: new Date(),\n        priority: 2,\n      });\n    }\n\n    return insights;\n  }\n\n  // Helper methods\n  private getRecentIssues(issues: JiraIssue[], timeRange: string): JiraIssue[] {\n    const now = new Date();\n    const daysBack = timeRange === 'week' ? 7 : timeRange === 'month' ? 30 : 90;\n    const cutoff = new Date(now.getTime() - daysBack * 24 * 60 * 60 * 1000);\n\n    return issues.filter(issue => new Date(issue.fields.created) >= cutoff);\n  }\n\n  private getOlderIssues(issues: JiraIssue[], timeRange: string): JiraIssue[] {\n    const now = new Date();\n    const daysBack =\n      timeRange === 'week' ? 14 : timeRange === 'month' ? 60 : 180;\n    const cutoff = new Date(now.getTime() - daysBack * 24 * 60 * 60 * 1000);\n\n    return issues.filter(issue => {\n      const created = new Date(issue.fields.created);\n      return (\n        created < cutoff &&\n        created >= new Date(now.getTime() - daysBack * 2 * 24 * 60 * 60 * 1000)\n      );\n    });\n  }\n}\n\nexport default AIInsightsService;\n"],"names":["_AIInsightsService","issues","sprints","timeRange","insights","performanceInsights","trendInsights","anomalyInsights","riskInsights","recommendationInsights","a","b","error","issue","velocity","cycleTime","bugRate","velocityTrend","completionTrend","velocityAnomalies","bugAnomalies","completionAnomalies","overdueIssues","unassignedHighPriority","processInsights","efficiencyInsights","completedIssues","totalPoints","sum","type","created","updated","totalIssues","bugIssues","reworkIssues","recentIssues","olderIssues","recentVelocity","olderVelocity","changeRate","recentCompletion","olderCompletion","expectedVelocity","completionRate","now","daysBack","cutoff","__publicField","AIInsightsService"],"mappings":"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"}
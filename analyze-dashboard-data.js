// Script para analisar os dados que est√£o sendo exibidos no dashboard
console.log('üîç AN√ÅLISE DOS DADOS DO DASHBOARD ATUAL');
console.log('='.repeat(50));

// Baseado nas imagens fornecidas pelo usu√°rio, vamos analisar os dados
console.log('\nüìä DADOS ATUAIS DO DASHBOARD:');
console.log('='.repeat(30));

console.log('\nüìã Projeto SEGP (Seguran√ßa & Privacidade):');
console.log('  Total Issues: 100');
console.log('  Usu√°rios Ativos: 8');
console.log('  Status: GOOD');

console.log('\nüë• Usu√°rios Identificados no Dashboard:');
const users = [
  'Jos√© Gabriel de Oliveira Hon√≥rio',
  'Jean Rodrigues',
  'Mariana Ruzzi',
  'Jo√£o Vitor Custodio Dalla Rosa',
  'Elaine Morais',
  'Rafaela Rog√©rio Tadeo',
  'Gabriel Donato',
  'Gil Santos',
];

users.forEach((user, index) => {
  console.log(`  ${index + 1}. ${user}`);
});

console.log('\nüìà Issues por Status (Dashboard):');
const statusData = {
  Cancelado: 48,
  Resolvido: 33,
  'AGUARDANDO SUPORTE': 10,
  FECHADO: 4,
  'Em andamento': 1,
  'Aguardando cliente': 2,
  'Em Aberto': 1,
  'AGUARDANDO APROVA√á√ÉO GESTOR': 1,
};

Object.entries(statusData).forEach(([status, count]) => {
  console.log(`  ${status}: ${count}`);
});

const totalStatusIssues = Object.values(statusData).reduce(
  (sum, count) => sum + count,
  0
);
console.log(`\nüìä Total Issues por Status: ${totalStatusIssues}`);

console.log('\nüìã Issues por Tipo (Dashboard):');
const typeData = {
  '[System] Solicita√ß√£o de servi√ßo': 69,
  Tarefa: 19,
  '[System] Solicita√ß√£o de servi√ßo com aprova√ß√µes': 9,
};

Object.entries(typeData).forEach(([type, count]) => {
  console.log(`  ${type}: ${count}`);
});

const totalTypeIssues = Object.values(typeData).reduce(
  (sum, count) => sum + count,
  0
);
console.log(`\nüìä Total Issues por Tipo: ${totalTypeIssues}`);

console.log('\nüë• Issues por Usu√°rio (Dashboard):');
const userIssues = {
  'Jos√© Gabriel de Oliveira Hon√≥rio': 37,
  'Jean Rodrigues': 10,
  'Mariana Ruzzi': 4,
  'Jo√£o Vitor Custodio Dalla Rosa': 6,
  'Elaine Morais': 1,
  'Rafaela Rog√©rio Tadeo': 3,
  'Gabriel Donato': 4,
  'Gil Santos': 1,
};

Object.entries(userIssues).forEach(([user, count]) => {
  console.log(`  ${user}: ${count} issues`);
});

const totalUserIssues = Object.values(userIssues).reduce(
  (sum, count) => sum + count,
  0
);
console.log(`\nüìä Total Issues por Usu√°rio: ${totalUserIssues}`);

console.log('\nüîç AN√ÅLISE DE DISCREP√ÇNCIAS:');
console.log('='.repeat(30));

console.log(`\n‚ùå PROBLEMAS IDENTIFICADOS:`);
console.log(`1. Total Issues do Projeto: 100`);
console.log(`2. Total Issues por Status: ${totalStatusIssues}`);
console.log(`3. Total Issues por Tipo: ${totalTypeIssues}`);
console.log(`4. Total Issues por Usu√°rio: ${totalUserIssues}`);

console.log(`\nüìä DISCREP√ÇNCIAS:`);
console.log(
  `- Status vs Projeto: ${totalStatusIssues} vs 100 = ${
    totalStatusIssues - 100
  }`
);
console.log(
  `- Tipo vs Projeto: ${totalTypeIssues} vs 100 = ${totalTypeIssues - 100}`
);
console.log(
  `- Usu√°rio vs Projeto: ${totalUserIssues} vs 100 = ${totalUserIssues - 100}`
);

console.log(`\nüéØ CONCLUS√ïES:`);
console.log(`1. O dashboard est√° exibindo apenas dados do projeto SEGP`);
console.log(
  `2. H√° inconsist√™ncias na contagem de issues entre diferentes visualiza√ß√µes`
);
console.log(
  `3. A soma das issues dos usu√°rios (${totalUserIssues}) n√£o bate com o total do projeto (100)`
);
console.log(
  `4. O sistema n√£o est√° agregando dados de m√∫ltiplos projetos quando selecionados`
);

console.log(`\nüîß RECOMENDA√á√ïES:`);
console.log(
  `1. Verificar se o JQL est√° sendo gerado corretamente para m√∫ltiplos projetos`
);
console.log(
  `2. Corrigir a agrega√ß√£o de dados quando m√∫ltiplos projetos s√£o selecionados`
);
console.log(
  `3. Garantir que a contagem de issues seja consistente em todas as visualiza√ß√µes`
);
console.log(
  `4. Implementar l√≥gica para somar issues de usu√°rios que aparecem em m√∫ltiplos projetos`
);
